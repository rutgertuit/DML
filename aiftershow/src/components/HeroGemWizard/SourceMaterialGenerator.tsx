
import React, { useState, useEffect } from 'react';

interface SourceMaterialGeneratorProps {
  gemPlan: { goal: string, requiredDocuments: string[] };
  onFilesConfirmed: () => void;
}

// Mock function for API call
async function getGeminiFlashStream(prompt: string): Promise<string> {
  console.log("API Call with prompt:", prompt);
  return `A research prompt for ${prompt.split("'")[1]}`;
}

const SourceMaterialGenerator: React.FC<SourceMaterialGeneratorProps> = ({ gemPlan, onFilesConfirmed }) => {
  const [prompts, setPrompts] = useState<{ documentName: string, prompt: string }[]>([]);
  const [copied, setCopied] = useState<string | null>(null);

  useEffect(() => {
    const generatePrompts = async () => {
      const generatedPrompts = await Promise.all(
        gemPlan.requiredDocuments.map(async (docName) => {
          const metaPrompt = `Generate a research prompt for a user to create a source document titled: '${docName}'. The user's main goal is '${gemPlan.goal}'. The prompt should guide them to create a high-quality, focused document.`;
          const prompt = await getGeminiFlashStream(metaPrompt);
          return { documentName: docName, prompt };
        })
      );
      setPrompts(generatedPrompts);
    };

    generatePrompts();
  }, [gemPlan]);

  const handleCopy = (prompt: string, documentName: string) => {
    navigator.clipboard.writeText(prompt);
    setCopied(documentName);
    setTimeout(() => setCopied(null), 2000);
  };

  return (
    <div>
      <h3 className="font-display text-2xl font-bold text-text-light mb-4">Step 3: Generate Source Material Prompts</h3>
      <div className="prompts-list space-y-4 mb-6">
        {prompts.map(({ documentName, prompt }) => (
          <div key={documentName} className="code-block-container relative">
            <h4 className="font-bold text-primary mb-2">{documentName}</h4>
            <div className="bg-primary/10 rounded-lg p-2 pb-0 border border-primary/30">
              <button
                type="button"
                className="copy-btn flex items-center gap-2 px-4 py-2 text-base font-bold bg-primary text-background-dark rounded-lg absolute top-2 right-2 shadow hover:bg-blue-500 transition-all"
                onClick={() => handleCopy(prompt, documentName)}
              >
                {copied === documentName ? 'Copied!' : 'Copy Prompt'}
              </button>
              <pre className="code-block max-w-full whitespace-pre-wrap break-words overflow-x-auto bg-transparent p-2 pt-8">{prompt}</pre>
            </div>
          </div>
        ))}
      </div>
      <div className="confirmation">
        <h4 className="font-bold text-text-light mb-2">Confirmation</h4>
        <p className="text-text-light/80 mb-4">Please create the following files and paste the content generated by the prompts above:</p>
        <ul className="list-disc list-inside text-text-light/80 space-y-2 mb-4">
          {gemPlan.requiredDocuments.map(doc => <li key={doc}>{doc}</li>)}
        </ul>
        <button
          onClick={onFilesConfirmed}
          className="hero-gem-btn w-full font-mono uppercase text-lg bg-primary text-background-dark font-bold py-3 px-6 rounded hover:shadow-glow-blue transition-shadow"
        >
          I have created all my files
        </button>
      </div>
    </div>
  );
};

export default SourceMaterialGenerator;
